= nested_form_for([:admins, @service], html: { class: 'form-horizontal' }) do |f|
  - if @service.errors.any?
    #error_explanation
      %h2= t 'form.errors.prohibited', number_of_errors: @service.errors.count
      .ul.list-unstyled
        - @service.errors.messages.each do |error_message|
          .li.text-danger
            = error_message.last.last.html_safe

  %fieldset
    .form-group
      -if @service.homoclave
        = f.label :homoclave, class: 'col-lg-2 control-label'
        .col-lg-8.control-label-left
          =@service.homoclave
  %fieldset
    .form-group
      = f.label :name, "#{t('form.labels.name')}*", class: 'col-lg-2 control-label'
      .col-lg-8
        = f.text_field :name, class: 'form-control'
  %fieldset
    .form-group
      = f.label :service_type, "#{t('form.labels.service_type')}*", class: 'col-lg-2 control-label'
      .col-lg-8
        = f.select :service_type, service_type_options,{ prompt: I18n.t("form.options.service_type_select")},{ class: 'chosen-select'}
  %fieldset
    .form-group
      / = f.label :dependency, "#{t('form.labels.dependency')}*", class: 'col-lg-2 control-label'
      = f.label :organisation_id,
                t('form.labels.dependency'),
                class: 'col-md-2 control-label'
      .col-lg-8
        / = f.select :dependency, service_dependency_options,{ prompt: I18n.t("form.options.service_type_dependency")}, { class: 'chosen-select'}
        = f.select :organisation_id,
                   organisation_options,
                   { prompt: I18n.t("form.options.dependency_select") },
                   class: 'chosen-select autocomplete-organisation_id'
  %fieldset
    .form-group
      / = f.label :administrative_unit, "#{t('form.labels.administrative_unit')}*", class: 'col-lg-2 control-label'
      = f.label :agency_id,
                t('form.labels.administrative_unit'),
                class: 'col-md-2 control-label'
      .col-lg-8
        / = f.select :administrative_unit, service_administrative_unit_options,{ prompt: I18n.t("form.options.service_type_administrative")},{ class: 'chosen-select'}
        = f.select :agency_id,
                   agency_options,
                   { prompt: I18n.t("form.options.administrative_unit_select") },
                   class: 'chosen-select autocomplete-agency_id'
  %fieldset
    .form-group
      = f.label :cis, "#{t('form.labels.admin.cis')}*", class: 'col-md-2 control-label'
      .col-md-8
        = f.select :cis, service_cis_options.collect {|opt| [opt[:label], opt[:id]] }, { prompt: t('service_requests.form.prompt_center') }, { class: 'js-load_service_fields chosen-select' ,:onchange=>"validate_requirements()",:multiple=>true}
  %fieldset
    .form-group
      = f.label :service_admin_id, "#{t('form.labels.admin_id')}*", class: 'col-lg-2 control-label'
      .col-lg-8
        - if @service.errors.any? || (@service.agency_id.present? && @service.organisation_id.present?)
          = f.select :service_admin_id, @available_admins.select{ |admin| admin.agency_id == @service.agency_id.to_i && admin.organisation_id == @service.organisation_id.to_i }.collect{|opt| [ "#{opt.name} #{opt.surname} #{opt.second_surname}", opt.id]},{ prompt: I18n.t("form.options.service_type_service_admin")}, { class: 'chosen-select'}
        - else
          = f.select :service_admin_id, @available_admins.collect{|opt| [ "#{opt.name} #{opt.surname} #{opt.second_surname}", opt.id]},{ prompt: I18n.t("form.options.service_type_service_admin")}, { class: 'chosen-select'}

  =t('service_requests.new.rules')
  %hr
  .form-group
    .col-lg-8
      = f.submit t('.save'), class: 'btn btn-primary'
      = link_to t('.cancel'), admins_services_path, class: 'btn btn-default'

:javascript
  $(document).ready(loadChosen);
  $(document).on('page:load', loadChosen);
